PI = 3.1415926535
// grid spacing parameters
MAX_LEVELS = 1                            // maximum number of levels in locally refined grid
REF_RATIO  = 4                            // refinement ratio between levels
N = 32                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing
DX = 3.0/NFINEST
INTERFACE_TYPE = "CHANNEL"

THETA = 0.0//PI/18.0
YLOW = 0.0
YUP = 0.5

Q_bc {
  acoef_function_0 = "1.0"
  acoef_function_1 = "0.0"
  acoef_function_2 = "0.0"
  acoef_function_3 = "0.0"

  bcoef_function_0 = "0.0"
  bcoef_function_1 = "1.0"
  bcoef_function_2 = "1.0"
  bcoef_function_3 = "1.0"

  gcoef_function_0 = "0.0"
  gcoef_function_1 = "0.0"
  gcoef_function_2 = "0.0"
  gcoef_function_3 = "0.0"
}


InternalFill {
}

Main {

// log file parameters
   log_file_name               = "output"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt", "ExodusII"
   viz_dump_interval           = 0
   viz_dump_dirname            = "new_viz_adv_diff2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_adv_diff2d"

   data_dump_interval          = 0
   data_dump_dirname           = "hier_data_IB2d"

   timer_dump_interval = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0),(N - 1,N - 1) ]
   x_lo = 0.0, -0.5
   x_up = 2.0, 1.5
   periodic_dimension = 0,0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.9e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.9e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}
