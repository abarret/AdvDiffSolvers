// grid spacing parameters
MAX_LEVELS = 1                            // maximum number of levels in locally refined grid
REF_RATIO  = 4                            // refinement ratio between levels
N = 128                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing
DX = 3.0/NFINEST

MFAC = 1.5
ELEM_TYPE = "EDGE2"
ELEM_ORDER = "FIRST"

LS_TYPE = "ENTIRE_DOMAIN"
D = 1.0
C = 1.0
CENTER = 0.0, 0.0

LSCutCellOperator {
  robin_boundary = FALSE
  cache_boundary = TRUE
  use_rbfs = TRUE
  stencil_size = 5
}


CutCellMeshMapping {
  perturb_nodes = FALSE
}

Main {

// log file parameters
   log_file_name               = "output"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt", "ExodusII"
   viz_dump_interval           = 1
   viz_dump_dirname            = "viz"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_adv_diff2d"

   data_dump_interval          = 0
   data_dump_dirname           = "hier_data_IB2d"

   timer_dump_interval = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0),(N - 1,N - 1) ]
   x_lo = -1.0,-1.0
   x_up = 1.0,1.0
   periodic_dimension = 1,1
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.9e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.9e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

IBFESurfaceMethod {
   IB_delta_fcn               = "IB_4"
}
