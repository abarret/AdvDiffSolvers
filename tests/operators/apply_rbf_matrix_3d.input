N = 16*2
L = 4.0
RADIUS = L / 4.0
DX = L  / N
MFAC = 1.0
ELEM_TYPE = "HEX8"
XCOM = 0.0
YCOM = 0.0
ZCOM = 0.0
C = 1.0
D = 1.0
A = 1.0
B = 0.0

PoissonSolver {
  a = A
  b = B
  c = C
  d = D
  eps = 0.25 * DX
  rbffd_dist = 5.0 * DX
  poly_degree = 3
  stencil_size = 24

  ds = DX
  com = XCOM,YCOM,ZCOM
}

MeshMapping {
  max_level = 1
}

Q {
   l = L
   function = "sin(4.0*PI*X_0/l)*sin(4.0*PI*X_1/l)*sin(4.0*PI*X_2/l)"
}

Laplacian {
   c = C
   d = D
   l = L
   r = RADIUS
   xcom = XCOM
   ycom = YCOM
   zcom = ZCOM
   eps = 0.3 * DX
//   function = "sqrt((X_0-xcom)*(X_0-xcom) + (X_1-ycom)*(X_1-ycom) + (X_2-zcom)*(X_2-zcom)) < (r + eps) ? sin(4.0*PI*X_0/l)*sin(4.0*PI*X_1/l)*sin(4.0*PI*X_2/l) : (c - d*48.0*PI*PI/(l*l))*sin(4.0*PI*X_0/l)*sin(4.0*PI*X_1/l)*sin(4.0*PI*X_2/l)"
   function = "(c - d*48.0*PI*PI/(l*l))*sin(4.0*PI*X_0/l)*sin(4.0*PI*X_1/l)*sin(4.0*PI*X_2/l)"
}

ls {
   r = RADIUS
   xcom = XCOM
   ycom = YCOM
   zcom = ZCOM
   function = "r - sqrt((X_0-xcom)*(X_0-xcom) + (X_1-ycom)*(X_1-ycom) + (X_2-zcom)*(X_2-zcom))"
}

Main {
// log file parameters
   log_file_name = "output"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz3d"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

CartesianGeometry {
   domain_boxes       = [(0,0,0), (N - 1,N - 1,N - 1)]
   x_lo               = -L/2, -L/2, -L/2      // lower end of computational domain.
   x_up               = L/2, L/2, L/2      // upper end of computational domain.
   periodic_dimension = 0, 0, 0
}

GriddingAlgorithm {
   max_levels = 1                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4, 4              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [( N/4 , N/4 , N/4 ),( N/2 - 1 , N/2 - 1, N/2 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.01
   timer_list = "IBTK::*::*","ADS::*::*"
}
