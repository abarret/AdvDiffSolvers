RHO = 1.0
START_TIME = 0.0
END_TIME = 0.1
NUM_CYCLES = 1
MAX_LEVELS = 1
N = 32
DX = 4.0 / N
U_MAX = 5.0
CFL = 0.5
DT_MAX = 1.0e-2
ENABLE_LOGGING = TRUE
VIZ_DUMP_TIME_INTERVAL = DT_MAX
TAG_BUFFER = 1

KAPPA = 0.1
G_INIT = 1.0
Z_INIT = 2.0

ADV_DIFF_NUM_CYCLES = 1
ADV_DIFF_CONVECTIVE_OP_TYPE = "CUI"
ADV_DIFF_CONVECTIVE_TS_TYPE = "ADAMS_BASHFORTH"
ADV_DIFF_CONVECTIVE_FORM = "CONSERVATIVE"

AdvDiffIntegrator {
 start_time = START_TIME
 end_time = END_TIME
 num_cycles = ADV_DIFF_NUM_CYCLES
 convective_time_stepping_type = ADV_DIFF_CONVECTIVE_TS_TYPE
 convective_op_type = ADV_DIFF_CONVECTIVE_OP_TYPE
 convective_difference_form = ADV_DIFF_CONVECTIVE_FORM
 dt_max = DT_MAX
 enable_logging = ENABLE_LOGGING
}

Main {
// log file parameters
   log_file_name = "output"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz2d"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
   timer_dump_interval = 0
}

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N/4 - 1)]
   x_lo               = -2.0, 0.0      // lower end of computational domain.
   x_up               = 2.0, 1.0      // upper end of computational domain.
   periodic_dimension = 0, 0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4              // vector ratio to next coarser level
      level_2 = 2, 2
   }

   largest_patch_size {
      level_0 = 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
   RefineBoxes {
    // level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1, 3*N/4 - 2)]
    // level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )] // L-shaped refinement
    // level_0 = [( N/4 , N/8 ),( 3*N/4 - 1 , 3*N/4 - 1 )] 
    // level_0 = [(N/4 + 5 , N/4 + 5),( N/4 + 10, N/4 + 10)] 
//     level_0 = [(0,0), (30,30)] 
    level_0 = [( N/4 , 0),( 3*N/4 - 1, N/8+1)]
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1
   timer_list = "*::*::*","IBTK::*::*","IBAMR::*::*","multiphase::*::*"
}
