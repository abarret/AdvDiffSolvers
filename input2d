// physical parameters
PI = 3.14159265359
L = 1.0

// grid spacing parameters
MAX_LEVELS = 2                            // maximum number of levels in locally refined grid
REF_RATIO  = 2                            // refinement ratio between levels
N = 128                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing
H = L/NFINEST
CFL_MAX = 0.5
DT_MAX = CFL_MAX * H / 5
END_TIME = 10
REGRID_INTERVAL = 100000//int(1.0/CFL_MAX)

U = "-2*PI*(X_1-0.5)"
V = "2*PI*(X_0-0.5)"

//Q = "sin(2*PI*X_0)^4*sin(2*PI*X_1)^4"
Q = "exp(-100*((X_0-0.3)^2+(X_1-0.5)^2))"

QInitial {
   function = Q
}

UFunction {
   function_0 = U
   function_1 = V
}

Q_bcs {
    acoef_function_0 = "1.0"
    acoef_function_1 = "1.0"
    acoef_function_2 = "1.0"
    acoef_function_3 = "1.0"

    bcoef_function_0 = "0.0"
    bcoef_function_1 = "0.0"
    bcoef_function_2 = "0.0"
    bcoef_function_3 = "0.0"

    gcoef_function_0 = Q
    gcoef_function_1 = Q
    gcoef_function_2 = Q
    gcoef_function_3 = Q
}

Main {

// log file parameters
   log_file_name               = "test.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = NFINEST/8
   viz_dump_dirname            = "viz_adv_diff2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_adv_diff2d"
}

CartesianGeometry {
   domain_boxes = [ (0,0),(N - 1,N - 1) ]
   x_lo = 0,0
   x_up = L,L
   periodic_dimension = 1,1
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"//"GRADIENT_DETECTOR"
   RefineBoxes {
      level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
      //level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )]

   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total     = TRUE
   print_threshold = 0.1
   timer_list      = "IBAMR::*::*","IBTK::*::*","*::*::*"
}


AdvDiffSemiImplicitHierarchyIntegrator {
    start_time           = 0.0e0  // initial simulation time
    end_time             = END_TIME    // final simulation time
    grow_dt              = 2.0e0  // growth factor for timesteps
    cfl                  = CFL_MAX
    dt_max               = DT_MAX
    dt_min               = DT_MAX
    enable_logging       = TRUE
    regrid_interval      = REGRID_INTERVAL
    
    convective_op_type                 = "PPM"//"WAVE_PROP"
    convective_difference_form         = "ADVECTIVE"//CONSERVATIVE"
    convective_time_stepping_type      = "MIDPOINT_RULE"
    init_convective_time_stepping_type = "FORWARD_EULER"
    diffusion_time_stepping_type = "TRAPEZOIDAL_RULE"
    num_cycles = 2
    
    helmholtz_solver_type = "PETSC_KRYLOV_SOLVER"
    helmholtz_solver_db {
        ksp_type = "fgmres"
    }
    
    helmholtz_precond_type = "LEVEL_RELAXATION_FAC_PRECONDITIONER"
    helmholtz_precond_db {
        num_pre_sweeps  = 0
        num_post_sweeps = 3
        prolongation_method = "LINEAR_REFINE"
        restriction_method  = "CONSERVATIVE_COARSEN"
        coarse_solver_type  = "HYPRE_LEVEL_SOLVER"
        coarse_solver_rel_residual_tol = 1.0e-12
        coarse_solver_abs_residual_tol = 1.0e-50
        coarse_solver_max_iterations = 1
        coarse_solver_db {
            solver_type          = "PFMG"
            num_pre_relax_steps  = 0
            num_post_relax_steps = 3
            enable_logging       = FALSE
        }
    }
}
