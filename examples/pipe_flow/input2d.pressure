// physical parameters
PI = 3.14159265359
LX = 8.0
LY = 4.0
RHO = 1.0
MU = 0.01
U_MAX = 2.0
PE = 0.5
BASE_NAME = "test1"

// grid spacing parameters
MAX_LEVELS = 1                            // maximum number of levels in locally refined grid
REF_RATIO  = 4                            // refinement ratio between levels
N = 128                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing
DX = LX/NFINEST
H = DX
REGRID_INTERVAL = 1

OUTPUT_BDRY_INFO = FALSE
USING_LS_FCN = TRUE
DRAW_EXACT = FALSE
MIN_REFINE_FACTOR = -4.0
MAX_REFINE_FACTOR = 2.0
LEAST_SQUARES_ORDER = "QUADRATIC"
USE_STRANG_SPLITTING = TRUE
USE_OUTSIDE_LS_FOR_TAGGING = TRUE
ADV_INT_METHOD = "MIDPOINT_RULE"
DIF_INT_METHOD = "TRAPEZOIDAL_RULE"

ERROR_ON_MOVE = TRUE
MFAC = 1.0
ELEM_TYPE = "EDGE2"
elem_order = "FIRST"
THETA = PI/18.0
Y_LOW = 0.5
Y_UP = 1.5
KAPPA_S = 1.0e3
ETA_S = 1.0

D_coef = 0.05

USE_IB_DELTA_FUNCTIONS     = TRUE                   // whether to use smoothed delta functions to mediate Lagrangian-Eulerian interaction
IB_DELTA_FUNCTION          = "BSPLINE_3"         // the type of smoothed delta function to use for Lagrangian-Eulerian interaction
SPLIT_FORCES               = FALSE                  // whether to split interior and boundary forces
USE_JUMP_CONDITIONS        = TRUE                // whether to impose pressure jumps at fluid-structure interfaces
ONE_SIDED_INTERACTION      = FALSE
USE_CONSISTENT_MASS_MATRIX = TRUE                   // whether to use a consistent or lumped mass matrix
IB_POINT_DENSITY           = 2.0                    // approximate density of IB quadrature points for Lagrangian-Eulerian interaction
SOLVER_TYPE                = "STAGGERED"            // the fluid solver to use (STAGGERED or COLLOCATED)
GROW_DT                    = 2.0e0                  // growth factor for timesteps
NUM_CYCLES                 = 1                      // number of cycles of fixed-point iteration
CONVECTIVE_TS_TYPE         = "FORWARD_EULER"      // convective time stepping type
CONVECTIVE_OP_TYPE         = "STABILIZED_PPM"       // convective differencing discretization type
CONVECTIVE_FORM            = "ADVECTIVE"            // how to compute the convective terms
NORMALIZE_PRESSURE         = FALSE                  // whether to explicitly force the pressure to have mean zero
CFL_MAX                    = 0.2                    // maximum CFL number
DT                         = CFL_MAX*DX/U_MAX       // maximum timestep size
START_TIME                 = 0.0e0                  // initial simulation time
END_TIME                   = 10.0                 // final simulation time
ERROR_ON_DT_CHANGE         = TRUE                  // whether to emit an error message if the time step size changes
VORTICITY_TAGGING          = TRUE                   // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER                 = 1                      // size of tag buffer used by grid generation algorithm
REGRID_CFL_INTERVAL        = 0.5                    // regrid whenever any material point could have moved 0.5 meshwidths since previous regrid
OUTPUT_U                   = TRUE
OUTPUT_P                   = TRUE
OUTPUT_F                   = TRUE
OUTPUT_OMEGA               = TRUE
OUTPUT_DIV_U               = TRUE
ENABLE_LOGGING             = TRUE

// Level set parameters
LS_REINIT_INTERVAL = 1000000//REGRID_INTERVAL
MAX_ITERATIONS_LS     = NFINEST/4
LS_ORDER           = "THIRD_ORDER_ENO"
USE_SUBCELL_FIX    = TRUE
USE_SIGN_FIX       = TRUE
LS_ATOL            = 1e-10

U = "(X_1 < y_low ? 0.0 : (X_1 > y_up ? 0.0 : ((X_1 - y_low)*(y_up - X_1))))"

VelocityInitialConditions {
   y_low = Y_LOW
   y_up = Y_UP
   function_0 = "0.0"
   function_1 = "0.0"
}

PressureInitialConditions {
   y_low = Y_LOW
   y_up = Y_UP
   theta = THETA
   p = PE
   l = LX

   function = "(X_1 < (y_low + X_0 * tan(theta)) ? 0.0 : (X_1 > (y_up + X_0*tan(theta)) ? 0.0 : 2*p / l * X_0))"
}

VelocityBcCoefs_0 {
   y_low = Y_LOW
   y_up = Y_UP
   theta = THETA
   p = PE

   acoef_function_0 = "(X_1 < (y_low + X_0 * tan(theta)) ? 1.0 : (X_1 > (y_up + X_0*tan(theta)) ? 1.0 : 0.0))"
   acoef_function_1 = "(X_1 < (y_low + X_0 * tan(theta)) ? 1.0 : (X_1 > (y_up + X_0*tan(theta)) ? 1.0 : 0.0))"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "(X_1 < (y_low + X_0 * tan(theta)) ? 0.0 : (X_1 > (y_up + X_0*tan(theta)) ? 0.0 : 1.0))"
   bcoef_function_1 = "(X_1 < (y_low + X_0 * tan(theta)) ? 0.0 : (X_1 > (y_up + X_0*tan(theta)) ? 0.0 : 1.0))"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "(X_1 < (y_low + X_0 * tan(theta)) ? 0.0 : (X_1 > (y_up + X_0*tan(theta)) ? 0.0 : -p))"
   gcoef_function_1 = "(X_1 < (y_low + X_0 * tan(theta)) ? 0.0 : (X_1 > (y_up + X_0*tan(theta)) ? 0.0 : p))"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

VelocityBcCoefs_1 {
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

RelaxationLSMethod {
    order              = LS_ORDER
    apply_subcell_fix  = USE_SUBCELL_FIX
    apply_sign_fix     = USE_SIGN_FIX
    sweep_abs_tol      = LS_ATOL
    max_iterations     = MAX_ITERATIONS_LS
    enable_logging     = FALSE
    reinit_interval    = LS_REINIT_INTERVAL
}

LSCutCellOperator {
  robin_boundary = FALSE
  cache_boundary = TRUE
}

InsideLSFcn {
   theta = THETA
   l = LX
   y_low = Y_LOW
   y_up = Y_UP
}

QInitial {
}

PoissonSolver {
}

Q_bcs {
    D = 1.0

    acoef_function_0 = "0.0"
    acoef_function_1 = "0.0"
    acoef_function_2 = "0.0"
    acoef_function_3 = "0.0"

    bcoef_function_0 = "1.0"
    bcoef_function_1 = "1.0"
    bcoef_function_2 = "1.0"
    bcoef_function_3 = "1.0"

    gcoef_function_0 = "0.0"
    gcoef_function_1 = "0.0"
    gcoef_function_2 = "0.0"
    gcoef_function_3 = "0.0"
}

Main {

// log file parameters
   log_file_name               = "test.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt", "ExodusII"
   viz_dump_interval           = NFINEST/8
   viz_dump_dirname            = "viz_adv_diff2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_adv_diff2d"

   data_dump_interval          = 0
   data_dump_dirname           = "hier_data_IB2d"

   timer_dump_interval = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0),(2*N - 1,N - 1) ]
   x_lo = 0,0
   x_up = LX,LY
   periodic_dimension = 0,0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.9e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.9e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
   RefineBoxes {
      level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = TRUE
   print_total     = TRUE
   print_threshold = 0.0
   timer_list      = "LS::*::*","IBAMR::*::*","IBTK::*::*"
}


SBAdvDiffIntegrator {
    start_time           = 0.0e0  // initial simulation time
    end_time             = END_TIME    // final simulation time
    grow_dt              = 2.0e0  // growth factor for timesteps
    regrid_interval      = REGRID_INTERVAL  // effectively disable regridding
    cfl                  = CFL_MAX
    dt_max               = DT
    dt_min               = DT
    enable_logging       = TRUE

    prescribe_level_set  = USING_LS_FCN
    min_ls_refine_factor = MIN_REFINE_FACTOR
    max_ls_refine_factor = MAX_REFINE_FACTOR
    least_squares_order = LEAST_SQUARES_ORDER
    use_strang_splitting = USE_STRANG_SPLITTING
    advection_ts_type = ADV_INT_METHOD
    diffusion_ts_type = DIF_INT_METHOD

    tag_buffer = TAG_BUFFER
    
    convective_op_type                 = "PPM"//WAVE_PROP"
    convective_difference_form         = "CONSERVATIVE"
    convective_time_stepping_type      = "TRAPEZOIDAL_RULE"
    init_convective_time_stepping_type = "MIDPOINT_RULE"
    diffusion_time_stepping_type = "TRAPEZOIDAL_RULE"
    num_cycles = 1
}

IBHierarchyIntegrator {
   start_time          = START_TIME
   end_time            = END_TIME
   grow_dt             = GROW_DT
   num_cycles          = NUM_CYCLES
   regrid_cfl_interval = REGRID_CFL_INTERVAL
   dt_max              = DT
   error_on_dt_change  = ERROR_ON_DT_CHANGE
   enable_logging      = ENABLE_LOGGING
}

IBFESurfaceMethod {
   use_IB_spread_operator     = USE_IB_DELTA_FUNCTIONS
   use_IB_interp_operator     = USE_IB_DELTA_FUNCTIONS
   IB_delta_fcn               = IB_DELTA_FUNCTION
   split_forces               = SPLIT_FORCES
// split_tangential_force     = FALSE
   use_jump_conditions        = USE_JUMP_CONDITIONS
   use_consistent_mass_matrix = USE_CONSISTENT_MASS_MATRIX
   IB_point_density           = IB_POINT_DENSITY
//   constrain_tangential_motion = TRUE
//   constrain_interior_faces = TRUE
}

INSStaggeredHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.01
   tag_buffer                    = TAG_BUFFER
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
   num_cycles = 1
}
